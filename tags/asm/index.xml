<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asm on xerxes blog</title>
    <link>https://xerxesnopt.github.io/tags/asm/</link>
    <description>Recent content in asm on xerxes blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 02 Sep 2020 13:06:01 +0800</lastBuildDate>
    
	<atom:link href="https://xerxesnopt.github.io/tags/asm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PE-Struct</title>
      <link>https://xerxesnopt.github.io/post/pe-struct/</link>
      <pubDate>Wed, 02 Sep 2020 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/pe-struct/</guid>
      <description>&lt;h2 id=&#34;nt头数据结构&#34;&gt;NT头数据结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SIGNATURE&lt;/strong&gt;:-&amp;gt; DWORD: 4个字节 50450000h(&amp;lsquo;PE&#39;00)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMAGE_FILE_HEADER&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMAGE_OPTIONAL_HEADER32&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>80386寻址方式</title>
      <link>https://xerxesnopt.github.io/post/80386-address/</link>
      <pubDate>Sat, 02 Feb 2019 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/80386-address/</guid>
      <description>实模式 CPU为了兼容，保留了实模式,现代操作系统在刚加电时首先运行在实模式下，然后再切换到保护模式下运行。
 逻辑地址：即逻辑上的地址，实模式下由“段基地址+段内偏移”组成；保护模式下由“段选择符+段内偏移”组成。 线性地址：逻辑地址经分段机制后就成线性地址，它是平坦的；如果不启用分页，那么此线性地址即物理地址。 物理地址：线性地址经分页转换后就成了物理地址。  8086 只有16位，地址总线20位。要寻找2的20次方 即1mb地址。16位 2的16次方 64kb远远不够。就使用段寄存器 16位x 10h(16)+16位 = 2的16次方乘以 2的4次方 = 2的20次方 进行寻址。 每个段最大也就64kb.
保护模式   段寄存器其实保存的是段选择符，而不是段基地址。要通过段选择符来找到实际的段基地址。
  段选择符16位，0-1位RPL,请求特权级。2位TI TI位0 使用GDT , TI=1 ,LDT. 3-15位表示索引,共13位，索引保护模式下最多可以表示2^13=8192个,再加上2位TI 一共可以有 2x8192=16384个段描述符。由于ebx等都是32位的，所以段内偏移地址最大可达4gb。这样16384x4gb=64tb。最大的逻辑/虚拟地址。
  段描述符8字节，64位。
  段选择子结构，16位数字
  | 1 | 0 | 字节 |7654321076543 2 10| 比特 |-------------|-|--| 占位 | INDEX |T|R | 含义 | |I|P | | | |L | ---------------------   INDEX: GDT或者LDT的索引号</description>
    </item>
    
    <item>
      <title>win32-api</title>
      <link>https://xerxesnopt.github.io/post/win32-api/</link>
      <pubDate>Tue, 02 Jan 2018 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/win32-api/</guid>
      <description>&lt;h2 id=&#34;api-函数返回值&#34;&gt;API 函数返回值&lt;/h2&gt;
&lt;p&gt;Win32 API 返回值类型是一个dword。永远放在eax中。如果放不下，则eax中返回一个指针，或者提供一个缓存区地址。直接把数据返回到缓冲区中&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>win32汇编(环境搭建)</title>
      <link>https://xerxesnopt.github.io/post/win32-1/</link>
      <pubDate>Tue, 02 Jan 2018 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/win32-1/</guid>
      <description>&lt;h2 id=&#34;使用virtualbox安装winxp-sp2原版iso&#34;&gt;使用virtualbox安装winxp sp2原版iso&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;ed2k://%7Cfile%7Csc_winxp_pro_with_sp2.iso%7C629227520%7C505B810E128351482AF8B83AC4D04FD2%7C/&#34;&gt;msdn下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;序列号：BX6HT-MDJKW-H2J4X-BX67W-TVVFG&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asm-标志寄存器</title>
      <link>https://xerxesnopt.github.io/post/asm-chapter11/</link>
      <pubDate>Mon, 25 Dec 2017 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/asm-chapter11/</guid>
      <description>&lt;h2 id=&#34;flag寄存器标志寄存器&#34;&gt;flag寄存器（标志寄存器）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;用来存储相关指令的某些执行结果&lt;/li&gt;
&lt;li&gt;用来为cpu执行相关指令提供行为依据&lt;/li&gt;
&lt;li&gt;用来控制cpu的相关工作方式&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>asm-call,ret跟子程序 </title>
      <link>https://xerxesnopt.github.io/post/asm-chapter10/</link>
      <pubDate>Sun, 24 Dec 2017 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/asm-chapter10/</guid>
      <description>&lt;h2 id=&#34;ret&#34;&gt;ret&lt;/h2&gt;
&lt;p&gt;two steps&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asm-记录01 </title>
      <link>https://xerxesnopt.github.io/post/asm-8/</link>
      <pubDate>Fri, 01 Dec 2017 13:06:01 +0800</pubDate>
      
      <guid>https://xerxesnopt.github.io/post/asm-8/</guid>
      <description>&lt;h2 id=&#34;伪指令dd&#34;&gt;伪指令dd&lt;/h2&gt;
&lt;p&gt;定义双字型数据。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>